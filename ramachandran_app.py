# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gSR81Vw3AIfaRKZyyTAl_sKb4JRQChkx
"""

# Step 1: Upload your PDB file
from google.colab import files
uploaded = files.upload()

pdb_filename = list(uploaded.keys())[0]  # use first uploaded file

# Step 2: Imports
from Bio.PDB import PDBParser, PPBuilder
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Step 3: Function for Ramachandran plot + export angles
def ramachandran_plot(pdb_file, chain_id="A"):
    parser = PDBParser(QUIET=True)
    structure = parser.get_structure("protein", pdb_file)
    model = structure[0]
    chain = model[chain_id]

    ppb = PPBuilder()
    phi_psi = []
    for pp in ppb.build_peptides(chain):
        phi_psi.extend(pp.get_phi_psi_list())

    phi, psi, residues = [], [], []
    for i, (ph, ps) in enumerate(phi_psi):
        if ph and ps:  # skip terminal residues with missing angles
            phi.append(np.degrees(ph))
            psi.append(np.degrees(ps))
            residues.append(pp[i].get_resname() if i < len(pp) else "UNK")

    # Plot Ramachandran diagram
    plt.figure(figsize=(6,6))
    plt.scatter(phi, psi, c="blue", s=20, alpha=0.6, label="Residues")
    plt.xlim(-180, 180)
    plt.ylim(-180, 180)
    plt.xlabel("Phi (φ)")
    plt.ylabel("Psi (ψ)")
    plt.title("Ramachandran Plot")

    # Allowed regions (simplified)
    allowed_regions = [
        {"phi": (-160, -40), "psi": (-80, 50)},   # Beta sheet
        {"phi": (-90, -30), "psi": (-70, 10)},   # Right-handed helix
    ]

    for reg in allowed_regions:
        plt.gca().add_patch(
            plt.Rectangle((reg["phi"][0], reg["psi"][0]),
                          reg["phi"][1]-reg["phi"][0],
                          reg["psi"][1]-reg["psi"][0],
                          fill=False, edgecolor="red", linewidth=2, linestyle="--")
        )
    plt.legend()
    plt.show()

    # Stats
    allowed_count = 0
    for ph, ps in zip(phi, psi):
        for reg in allowed_regions:
            if reg["phi"][0] <= ph <= reg["phi"][1] and reg["psi"][0] <= ps <= reg["psi"][1]:
                allowed_count += 1
                break

    print(f"📊 Total residues checked: {len(phi)}")
    print(f"✅ Allowed residues: {allowed_count} ({allowed_count/len(phi)*100:.2f}%)")
    print(f"❌ Disallowed residues: {len(phi)-allowed_count}")

    # Save angles in a table
    df = pd.DataFrame({
        "Residue": residues,
        "Phi (°)": phi,
        "Psi (°)": psi
    })
    display(df.head(10))  # show first 10 rows
    df.to_csv("phi_psi_angles.csv", index=False)
    print("📂 Phi/Psi angles saved as phi_psi_angles.csv")

# Step 4: Run the function on uploaded file
ramachandran_plot(pdb_filename, "A")